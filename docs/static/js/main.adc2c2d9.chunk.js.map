{"version":3,"sources":["components/AddCategory.js","helpers/getGitfs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMhB,SAEE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SApBoB,SAACP,GACzBF,EAAeE,EAAEQ,OAAOF,a,+BCRfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAUH,GAF5C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEpC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAExB,ECH0B,SAAEA,GAE5B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WAETxB,EAASC,GACNwB,MAAM,SAAAC,GAELH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAKd,CAACpB,IAEGqB,EDlB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEb,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEdbgB,EAAe,WAE1B,MAAoCzC,mBAAU,CAAC,cAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCZpB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.adc2c2d9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue( e.target.value );\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if ( inputValue.trim().length > 2 ) {\n      setCategories( cats => [ inputValue, ...cats ] );\n      setInputValue('');\n    }\n\n  };\n\n  return (\n    <form onSubmit={ handleSubmit }>\n\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n\n   </form>\n  );\n\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n","export const getGifs = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=8Plsnd5WUftiWqDzdYkIcFwODNSMGhr5`;\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  });\n\n  return gifs\n};\n","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title } />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { data:images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n      { loading && <p className=\"animate__animated animate__flash\">Loadings</p> }\n\n      <div className=\"card-grid\">\n          {\n            images.map( img => (\n              <GifGridItem\n                key={ img.id }\n                { ...img }\n              />\n            ))\n          }\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGitfs\";\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect( () => {\n\n    getGifs( category )\n      .then( imgs => {\n\n        setState({\n          data: imgs,\n          loading: false\n        });\n\n      });\n\n  }, [category])\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState( ['One Punch'] );\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n\n      <ol>\n        {\n          categories.map( category => \n            <GifGrid\n              key={ category }\n              category={ category }\n            />\n          )\n        }\n      </ol>\n    </>\n  );\n\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}